# -*- coding: utf-8 -*-
# –ö–ª–∞—Å –¥–ª—è –æ—Å–Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–µ—Ä–∞
import asyncio
import aiohttp
from query_settings import url, proxies, headers # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. 
import openpyxl
import json
import math


class WB_parser:
    def __init__(self, url, proxies, headers):
        self.url = url
        self.proxies = proxies
        self.headers = headers

    async def requests_url(self) -> dict:
        """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ url"""
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.get(self.url, proxy=self.proxies) as response:
                data = await response.json()
                return data
    
    def num_basket(article_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è url —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞"""
        for product in article_id:
            vol_id = int(product)//100000 
            part = str(product)[:6]
            vol = str(product)[:4]

            print(vol_id)
            if 0 <=vol_id<= 143:
                basket = "01"
            elif 144 <=vol_id<= 287:
                basket = "02"
            elif 288 <=vol_id<= 431:
                basket = "03"
            elif 432 <=vol_id<= 719:
                basket = "04"
            elif 720 <=vol_id<= 1007:
                basket = "05"
            elif 1008 <=vol_id<= 1061:
                basket = "06"
            elif 1062 <=vol_id<= 1115:
                basket = "07"
            elif 1116 <=vol_id<= 1169:
                basket = "08"
            elif 1170 <=vol_id<= 1313:
                basket = "09"
            elif 1314 <=vol_id<= 1601:
                basket = "10"
            elif 1602 <=vol_id<= 1655:
                basket = "11"
            elif 1656 <=vol_id<= 1919:
                basket = "12"
            elif 1920 <=vol_id<= 2045:
                basket = "13"
            elif 2046 <=vol_id<= 2189:
                basket = "14"
            elif 2091 <=vol_id<= 2405:
                basket = "15"
            else:
                basket = "16"
        
        url = f'https://basket-{basket}.wbbasket.ru/vol{vol}/part{part}/{product}/info/ru/card.json'
        print(url)
        return url


    def increment_page_if_products_exist(url):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è page –Ω–∞ 1 –≤ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ "products" –Ω–µ –ø—É—Å—Ç–æ–π"""
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ
        # url_seller_art_count = 'https://catalog.wb.ru/sellers/v4/filters?appType=1&curr=rub&dest=12358048&filters=xsubject&spp=30&supplier=39232&uclusters=1'
        url_catalog_art_count = 'https://catalog.wb.ru/catalog/stationery4/v4/filters?appType=1&curr=rub&dest=12358048&spp=30&subject=4570&uclusters=0'
        seller_art_count = asyncio.run(start_class(url_catalog_art_count, proxies, headers))  # –Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ requests_url() 
        art_count = math.ceil((seller_art_count.json()["data"]["total"])/100)  # –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ü–∏–∫–ª–∞
        # print(art_count)

        for i in range(art_count):

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page –∏–∑ URL
            """url.split('?')[-1]: –†–∞–∑–¥–µ–ª—è–µ—Ç URL –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É ? –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è 
            —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.
            url.split('?')[-1].split('&'): –†–∞–∑–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å URL –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–º–≤–æ–ª & –≤ 
            –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
            p.split('=') for p in ...: –ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏—Ö –ø–æ —Å–∏–º–≤–æ–ª—É = –¥–ª—è 
            —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.
            dict(...): –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ."""
            params = dict(p.split('=') for p in url.split('?')[-1].split('&'))
            # page = int(params['page'])

            # –î–æ–±–∞–≤–ª—è–µ–º 1 –∫ –∑–Ω–∞—á–µ–Ω–∏—é page
            i += 1
    
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page –≤ URL
            params['page'] = str(i)

            # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL
            """url.split('?')[0]: –†–∞–∑–¥–µ–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π URL –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É ? –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, 
            –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
            + '?': –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞.
            '&'.join(...): –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å params –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–µ–¥–∏–Ω—è—è –∫–∞–∂–¥—É—é –ø–∞—Ä—É 
            –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–º &.
            [f"{k}={v}" for k, v in params.items()]: –ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ params –∏ 
            —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ" –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã."""
            updated_url = url.split('?')[0] + '?' + '&'.join([f"{k}={v}" for k, v in params.items()])
            print(updated_url)
            # –°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èüëÜ
            #_seller_art
            # url = "https://catalog.wb.ru/sellers/v2/catalog?appType=1&curr=rub&dest=12358048&page=19&sort=popular&spp=30&supplier=39232&uclusters=1"
            url = "https://catalog.wb.ru/catalog/stationery4/v2/catalog?appType=1&curr=rub&dest=12358048&page=1&sort=popular&spp=30&subject=4570&uclusters=0"
            url = "https://catalog.wb.ru/catalog/stationery4/v2/catalog?appType=1&cat=130944&curr=rub&dest=12358048&sort=popular&spp=30&uclusters=0"

    def pars_response(response_json):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ json"""
            data = (response_json)['data']['products']
            for item in data:
                    print('----------------------------------', end='\n')
                    article_id = item['id']
                    brand = item['brand']
                    name = item['name']
                    price = item['sizes'][0]['price']['total']
                    print(f'–ë—Ä–µ–Ω–¥: {item["brand"]}')
                    print(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item["name"]}')
                    print(f'–ê—Ä—Ç–∏–∫—É–ª: {item["id"]}')
                    print(f'—Ü–µ–Ω–∞: {price}')


    def add_commas_price(input_price):
            """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑—è–ø—è—Ç–æ–π –ø–æ—Å–ª–µ –¥–≤—É—Ö –ø–æ—Å–ª–¥–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
            x= int(len(input_price)-2)
            print(input_price[:x] +','+ input_price[x:])
            
            
    def save_file(data):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π 
        wb = openpyxl.Workbook()
        ws = wb.active
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        ws.append(['Article ID', 'Brand', 'Name', 'Price'])
        # –ü–æ–ª—É—á–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å?
        data = (json.load(data))['data']['products']
        for item in data: 
            print('----------------------------------', end='\n')
            article_id = item['id']
            brand = item['brand']
            name = item['name']
            price = item['sizes'][0]['price']['total']
            print(f'–ë—Ä–µ–Ω–¥: {item["brand"]}')
            print(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item["name"]}')
            print(f'–ê—Ä—Ç–∏–∫—É–ª: {item["id"]}')
            print(f'—Ü–µ–Ω–∞: {price}')
            ws.append([article_id, brand, name, price])



async def start_class(url, proxies, headers):
    obj = WB_parser(url, proxies, headers)
    result = await obj.requests_url()
    print(result)

asyncio.run(start_class(url, proxies, headers))